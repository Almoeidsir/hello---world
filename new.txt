import cv2
import dlib
import pyttsx3
from scipy.spatial import distance

# Initialize the pyttsx3 text-to-speech engine for alert messages
engine = pyttsx3.init()

# Set up the camera (you can change the camera index as needed, e.g., 0 for the default camera)
cap = cv2.VideoCapture(0)

# Face detection using dlib
face_detector = dlib.get_frontal_face_detector()

# Load the facial landmarks predictor model (shape_predictor_68_face_landmarks.dat)
dlib_facelandmark = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")

# Function to calculate the eye aspect ratio (EAR)
def Detect_Eye(eye):
    poi_A = distance.euclidean(eye[1], eye[5])
    poi_B = distance.euclidean(eye[2], eye[4])
    poi_C = distance.euclidean(eye[0], eye[3])
    aspect_ratio_Eye = (poi_A + poi_B) / (2 * poi_C)
    return aspect_ratio_Eye

# Initialize a flag to track whether the alert has been spoken
alert_spoken = False

# Main loop
while True:
    ret, frame = cap.read()

    if not ret:
        print("Error reading frame. Exiting...")
        break

    gray_scale = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    faces = face_detector(gray_scale)

    for face in faces:
        face_landmarks = dlib_facelandmark(gray_scale, face)
        leftEye = []
        rightEye = []

        # Points allocation for the left eyes (from 42 to 47)
        for n in range(42, 48):
            x = face_landmarks.part(n).x
            y = face_landmarks.part(n).y
            rightEye.append((x, y))
            next_point = n + 1
            if n == 47:
                next_point = 42
            x2 = face_landmarks.part(next_point).x
            y2 = face_landmarks.part(next_point).y
            cv2.line(frame, (x, y), (x2, y2), (0, 255, 0), 1)

        # Points allocation for the right eyes (from 36 to 41)
        for n in range(36, 42):
            x = face_landmarks.part(n).x
            y = face_landmarks.part(n).y
            leftEye.append((x, y))
            next_point = n + 1
            if n == 41:
                next_point = 36
            x2 = face_landmarks.part(next_point).x
            y2 = face_landmarks.part(next_point).y
            cv2.line(frame, (x, y), (x2, y2), (255, 255, 0), 1)

        # Calculate the eye aspect ratio (EAR) for both eyes
        right_Eye = Detect_Eye(rightEye)
        left_Eye = Detect_Eye(leftEye)
        Eye_Rat = (left_Eye + right_Eye) / 2

        # Round the EAR value
        Eye_Rat = round(Eye_Rat, 2)

        # Check if the EAR is below the threshold (indicating drowsiness)
        if Eye_Rat < 0.25 and not alert_spoken:
            cv2.putText(frame, "DROWSINESS DETECTED", (50, 100),
                        cv2.FONT_HERSHEY_PLAIN, 2, (21, 56, 210), 3)
            cv2.putText(frame, "Alert!!!! WAKE UP DUDE", (50, 450),
                        cv2.FONT_HERSHEY_PLAIN, 2, (21, 56, 212), 3)

            # Speak an alert message using pyttsx3
            engine.say("Alert!!!! WAKE UP DUDE")
            engine.runAndWait()
            alert_spoken = True
        elif Eye_Rat >= 0.25:
            alert_spoken = False

    # Display the video feed with overlay text
    cv2.imshow("Drowsiness Detection", frame)

    # Press the 'Esc' key to exit the loop
    key = cv2.waitKey(1)
    if key == 27:
        break

# Release the camera and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()